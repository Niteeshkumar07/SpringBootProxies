/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import java.lang.reflect.Proxy;


import org.example.classes.Man;
import org.example.classes.Person;
import org.example.classes.PersonInvocationHandler;


public class App {

    public static void main(String[] args) {

        //proxies are like middleware for ex thier is client and server and in betwwen
// thier is proxy is present which check the what client want to acess if its is probhited stop

//thier are two types of proxies dynamic in whic it applicable on method which is derived from interfaces and other is cglib which we implement on anything
        Man mohan = new Man("Mohan", 30, "Delhi", "India");
        ClassLoader mohanClassLoader = mohan.getClass().getClassLoader();
        Class[] interfaces = mohan.getClass().getInterfaces();
        Person proxymohan = (Person) Proxy.newProxyInstance(mohanClassLoader, interfaces, new PersonInvocationHandler(mohan));
        proxymohan.introduce(mohan.getName());
//       CgClass.main(args);
    }
}
